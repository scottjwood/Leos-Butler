{"ast":null,"code":"var _jsxFileName = \"D:\\\\DEV\\\\foundry-app\\\\frontend\\\\src\\\\pages\\\\CastingProcesses.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CastingProcesses = () => {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const [processes, setProcesses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProcesses = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/projects/${projectId}/casting-processes`);\n        const data = await response.json();\n        if (response.ok) {\n          setProcesses(Array.isArray(data) ? data : []);\n        } else {\n          throw new Error(data.error);\n        }\n      } catch (error) {\n        console.error('Error fetching casting processes:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProcesses();\n  }, [projectId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Casting Processes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: processes.map(process => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/casting-processes/${process.id}`,\n          children: process.step_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, process.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/projects/${projectId}/casting-processes/new`,\n      children: \"Add Casting Process\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(CastingProcesses, \"cxuGoGfQ27fa78n4B04ZB4DWFjs=\", false, function () {\n  return [useParams];\n});\n_c = CastingProcesses;\nexport default CastingProcesses;\nvar _c;\n$RefreshReg$(_c, \"CastingProcesses\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","jsxDEV","_jsxDEV","CastingProcesses","_s","projectId","processes","setProcesses","loading","setLoading","error","setError","fetchProcesses","response","fetch","data","json","ok","Array","isArray","Error","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","process","to","id","step_name","_c","$RefreshReg$"],"sources":["D:/DEV/foundry-app/frontend/src/pages/CastingProcesses.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\nconst CastingProcesses = () => {\r\n  const { projectId } = useParams();\r\n  const [processes, setProcesses] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProcesses = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/projects/${projectId}/casting-processes`);\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          setProcesses(Array.isArray(data) ? data : []);\r\n        } else {\r\n          throw new Error(data.error);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching casting processes:', error);\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProcesses();\r\n  }, [projectId]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Casting Processes</h1>\r\n      <ul>\r\n        {processes.map((process) => (\r\n          <li key={process.id}>\r\n            <Link to={`/casting-processes/${process.id}`}>{process.step_name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <Link to={`/projects/${projectId}/casting-processes/new`}>Add Casting Process</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CastingProcesses;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}